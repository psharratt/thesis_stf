library(topicmodels)
lda_list <- list()
SEED = set.seed(1500)
for (i in 1:29) {  # Change to 29
name <- namedb[i]
if (ndoc(dfmat_list[[name]]) > 0 && any(row_sums(dfmat_list[[name]]) > 0)) {
lda_list[[name]] <- LDA(dfmat_list[[name]], 10, control = list(alpha = 5), seed = SEED)
}
}
library(topicmodels)
lda_list <- list()
SEED = set.seed(1500)
for (i in 1:29) {  # Change to 29
name <- namedb[i]
if (ndoc(dfmat_list[[name]]) > 0 && any(rowSums(dfmat_list[[name]]) > 0)) {
lda_list[[name]] <- LDA(dfmat_list[[name]], 10, control = list(alpha = 5), seed = SEED)
}
}
library(topicmodels)
lda_list <- list()
SEED = set.seed(1500)
for (i in 1:29) {  # Change to 29
name <- namedb[i]
# Check if dfmat is not empty and contains at least one non-zero entry
if (ndoc(dfmat_list[[name]]) > 0 && any(apply(dfmat_list[[name]], 1, any))) {
lda_list[[name]] <- LDA(dfmat_list[[name]], 10, control = list(alpha = 5), seed = SEED)
}
}
library(topicmodels)
lda_list <- list()
SEED = set.seed(1500)
#this takes like 3 minutes
for (i in 1:29){
name = namedb[i]
lda_list[[name]] = LDA(dfmat_list[[name]], 10, control = list(alpha=5),seed=SEED)
}
View(lda_list)
knitr::opts_chunk$set(echo = TRUE)
# Using manifestoR package for dataset
library(manifestoR)
# Setting API key
mp_setapikey("manifesto_apikey.txt")
# Checking availability of United Kingdom data set for good practice
available_docs <- mp_availability(countryname == "United Kingdom")
available_docs
install.packages("prereg")
tinytex::install_tinytex()
install.packages("jsonlite")
install.packages("ggplot2")  # or any other visualization package you prefer
library(jsonlite)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
View(json_data)
# This step heavily depends on the structure of your JSON file.
df <- as.data.frame(json_data)
View(df)
# data processing
library(tidyverse)
df %>%
select(id, name, full_name, html_url, description)
View(df)
df %>%
select(id, name, full_name, html_url, description)
selected_df <- df %>%
select(id, name, full_name, html_url, description)
# View the resulting data frame
print(selected_df)
View(selected_df)
# presenting the DF
install.packages("gridExtra")
install.packages("ggplot2")
library(gridExtra)
library(ggplot2)
table_plot <- tableGrob(selected_df)
png("selected_df.png", width = 800, height = 600)  # Adjust the size as needed
grid.draw(table_plot)
install.packages("ggplot2")
View(table_plot)
# By default, the code chunks are hidden for brevity. Set the echo argument to TRUE for blocks you want to share the code in the output for.
knitr::opts_chunk$set(echo = F)
knitr::include_graphics("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/Fortran FPM Pushes and Commits Over Time.png")
knitr::include_graphics("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/Fortran FPM Pushes and Commits Over Time.png")
knitr::include_graphics("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/Fortran FPM Pushes and Commits Over Time.png")
View(selected_df)
fortran-lang-repos-postman <- head(selected_df)
fortran_lang_repos_postman <- head(selected_df)
View(fortran_lang_repos_postman)
install.packages("jsonlite")
install.packages("ggplot2")  # or any other visualization package you prefer
library(jsonlite)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
# This step heavily depends on the structure of your JSON file.
df <- as.data.frame(json_data)
# data processing
library(tidyverse)
selected_df <- df %>%
select(id, name, full_name, html_url, description)
fortran_lang_repos_postman <- head(selected_df)
knitr::kable(fortran_lang_repos_postman)
# Load packages and data to be clear from the start
library(jsonlite)
library(tidyverse)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
df <- as.data.frame(json_data)
selected_df <- df %>%
select(id, name, full_name, html_url, description)
fortran_lang_repos_postman <- head(selected_df)
knitr::kable(fortran_lang_repos_postman)
# Load packages and data to be clear from the start
library(jsonlite)
library(tidyverse)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
df <- as.data.frame(json_data)
selected_df <- df %>%
select(id, name, full_name, html_url, description)
fortran_lang_repos_postman <- head(selected_df)
# Load packages and data to be clear from the start
library(jsonlite)
library(tidyverse)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
df <- as.data.frame(json_data)
selected_df <- df %>%
select(id, name, full_name, html_url, description)
fortran_lang_repos_postman <- head(selected_df)
knitr::kable(fortran_lang_repos_postman)
# Load packages and data to be clear from the start
library(jsonlite)
library(tidyverse)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
df <- as.data.frame(json_data)
selected_df <- df %>%
select(id, full_name, html_url, description)
fortran_lang_repos_postman <- head(selected_df)
knitr::kable(fortran_lang_repos_postman)
fortran_lang_repos_postman <- head(selected_df)
knitr::kable(fortran_lang_repos_postman)
# By default, the code chunks are hidden for brevity. Set the echo argument to TRUE for blocks you want to share the code in the output for.
knitr::opts_chunk$set(echo = F)
library(readxl)
dataset_1 <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/investment dataset.xlsx")
head(dataset_1)
library(readxl)
library(knitr)
# Load the dataset
dataset_1 <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/investment dataset.xlsx")
# Display the first few rows with a more formatted table
kable(head(dataset_1), caption = "Head of Dataset 1")
fortran_lang_repos_postman <- head(selected_df)
# Load packages and data to be clear from the start
library(jsonlite)
library(tidyverse)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
df <- as.data.frame(json_data)
selected_df <- df %>%
select(id, full_name, html_url, description)
View(selected_df)
View(df)
fortran_lang_repos_postman <- head(selected_df)
knitr::kable(fortran_lang_repos_postman)
kable(head(selected_df), caption = "Example of Repo Data From GitHub API")
# Load packages and data to be clear from the start
library(jsonlite)
library(tidyverse)
library(readxl)
library(knitr)
json_data <- fromJSON("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran-lang-repos-postman.json")
df <- as.data.frame(json_data)
selected_df <- df %>%
select(id, full_name, html_url, description)
dataset_1 <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/investment dataset.xlsx")
kable(head(dataset_1), caption = "Head of Dataset 1")
kable(head(selected_df), caption = "Example of Repo Data From GitHub API")
dataset_2_fortran <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran_fpm_pushes_commits_raw.xlsx")
# Display the first few rows with a more formatted table
kable(head(dataset_2_fortran), caption = "Example of Repo Activity Data From GitHub API")
dataset_2_fortran <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran_fpm_pushes_commits_raw.xlsx")
# Display the first few rows with a more formatted table
kable(head(dataset_2_fortran), caption = "Example of Repo Activity Data From GitHub API")
dataset_2_fortran <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran_fpm_pushes_commits_raw.xlsx")
# Display the first few rows with a more formatted table
kable(head(dataset_2_fortran), caption = "Example of Repo Activity Data From GitHub API")
dataset_2_fortran <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran_fpm_pushes_commits_raw.xlsx")
# Display the first few rows with a more formatted table
kable(head(dataset_2_fortran), caption = "Example of Repo Activity Data From GitHub API")
kable(head(selected_df), caption = "Example of Organisation Data From GitHub API - Repositories")
dataset_2_fortran <- read_excel("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/data/raw/fortran_test/fortran_fpm_pushes_commits_raw.xlsx")
# Display the first few rows with a more formatted table
kable(head(dataset_2_fortran), caption = "Example of Fortran FPM Repo Activity Data From GitHub API")
knitr::include_graphics("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/Fortran FPM Pushes and Commits Over Time.png")
knitr::include_graphics("Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/data_schema.png")
knitr::include_graphics("Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/data_schema.png")
knitr::include_graphics("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/data_schema.png")
knitr::include_graphics("/Users/paulsharratt/Documents/Hertie/Semester 3/06 - Master's Thesis/thesis_stf/pap/figures/data_schema.png")
getwp()
getwd()
setwd("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/")
releases_raw <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/raw/releases-all.csv")
View(releases_raw)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Your dataframe is named releases_raw
# Convert release_created_at to datetime format
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# For plotting each release as a point
releases_raw %>%
ggplot(aes(x = release_created_at, group = repo_id)) +
geom_line(aes(color = as.factor(repo_id)), alpha = 0.5) +  # Draws lines connecting releases in the same repo, remove if unwanted
geom_point(aes(color = as.factor(repo_id))) +  # Plots points for each release
theme_minimal() +
labs(x = "Release Created At", y = "Count", title = "Time Series of Releases by Repo ID", color = "Repo ID") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text angle for better readability
# Assuming your dataframe is named df
# Convert release_created_at to datetime format
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# Group by repo_id and summarise to get counts (optional)
# This step is necessary if you want to plot counts or some summary statistics.
# If you just want to plot the release_created_at dates for each repo_id, you can skip this summarization.
releases_grouped <- releases_raw %>%
group_by(repo_id) %>%
summarise(release_count = n())  # This creates a summary df with counts. Adjust as needed.
# For plotting each release point
df %>%
ggplot(aes(x = release_created_at, group = repo_id)) +
geom_line(aes(color = as.factor(repo_id)), alpha = 0.5) +  # Draws lines connecting releases in the same repo
geom_point(aes(color = as.factor(repo_id))) +  # Plots points for each release
theme_minimal() +
labs(x = "Release Created At", y = "Count", title = "Time Series of Releases by Repo", color = "Repo ID") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text angle for better readability
# Assuming your dataframe is named df
# Convert release_created_at to datetime format
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# Group by repo_id and summarise to get counts (optional)
# This step is necessary if you want to plot counts or some summary statistics.
# If you just want to plot the release_created_at dates for each repo_id, you can skip this summarization.
releases_grouped <- releases_raw %>%
group_by(repo_id) %>%
summarise(release_count = n())  # This creates a summary df with counts. Adjust as needed.
# For plotting each release point
releases_grouped %>%
ggplot(aes(x = release_created_at, group = repo_id)) +
geom_line(aes(color = as.factor(repo_id)), alpha = 0.5) +  # Draws lines connecting releases in the same repo
geom_point(aes(color = as.factor(repo_id))) +  # Plots points for each release
theme_minimal() +
labs(x = "Release Created At", y = "Count", title = "Time Series of Releases by Repo", color = "Repo ID") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text angle for better readability
View(releases_grouped)
# Convert release_created_at to datetime format
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Ensure release_created_at is in datetime format
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# Directly plot each release point from releases_raw
releases_raw %>%
ggplot(aes(x = release_created_at, y = repo_id)) +  # Use repo_id on the y-axis if you want to spread out the plots
geom_line(aes(group = repo_id, color = as.factor(repo_id)), alpha = 0.5) +  # Optional: Draws lines connecting releases in the same repo
geom_point(aes(color = as.factor(repo_id))) +  # Plots points for each release
theme_minimal() +
labs(x = "Release Created At", y = "Repo ID", title = "Time Series of Releases by Repo", color = "Repo ID") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Adjust text angle for better readability
groups_all_raw <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/raw/repo_groups_all.csv")
View(groups_all_raw)
View(groups_all_raw)
library(dplyr)
repo_group_data <- read.csv("/Users/paul/Documents/08 - Hertie/thesis_stf/data/raw/repo-group.csv")
repo_group_data <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/raw/repo-group.csv")
repo_group_filtered <- repo_group_data %>%
group_by(repo_id) %>%
filter(n() == 1) %>%
ungroup()
View(repo_group_filtered)
repo_group_check <- repo_group_data %>%
group_by(repo_id) %>%
count(n)
repo_group_check <- repo_group_data %>%
group_by(repo_id) %>%
count()
View(repo_group_check)
View(repo_group_filtered)
repo_group_check <- repo_group_data %>%
group_by(repo_group_id) %>%
count()
library(tidyverse)
library(lubridate)
# Assuming your releases_raw dataframe's release_created_at column is already in datetime format.
# If not, convert it:
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# First, let's create a new column that just contains the date part of release_created_at
releases_raw$date <- as.Date(releases_raw$release_created_at)
# Now, group by repo_id and date, and count the number of releases
releases_grouped <- releases_raw %>%
group_by(repo_id, date) %>%
summarise(release_count = n(), .groups = 'drop')  # Drop groups for easier plotting
# Plot the data with ggplot2
releases_grouped %>%
ggplot(aes(x = date, y = release_count, group = repo_id)) +
geom_line(aes(color = as.factor(repo_id)), alpha = 0.75) +  # Connects counts over time by repo_id
geom_point(aes(color = as.factor(repo_id))) +  # Visualize each count
theme_minimal() +
labs(x = "Date", y = "Number of Releases", title = "Time Series of Release Counts by Repo", color = "Repo ID") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve date labels readability
View(groups_all_raw)
View(releases_grouped)
View(repo_group_data)
View(repo_group_check)
View(releases_raw)
# Assuming 'repo_group_data' has columns: repo_id, repo_group_id, ...
# and 'releases_grouped' has columns: repo_id, release_id, ...
# Merge the dataframes on 'repo_id'
merged_data <- left_join(releases_grouped, repo_group_data, by = "repo_id")
# Now 'merged_data' will have 'repo_group_id' associated with each 'repo_id' from 'releases_grouped'
View(merged_data)
# Now 'merged_data' will have 'repo_group_id' associated with each 'repo_id' from 'releases_grouped'
# Specify the file path and name
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/merged_data.csv"
# Write the merged_data dataframe to a CSV file
write.csv(merged_data, file_path, row.names = FALSE)
# Ensure release_created_at is a Date or POSIXct type
merged_data$release_created_at <- as.Date(merged_data$release_created_at)
View(releases_raw)
View(releases_grouped)
library(dplyr)
library(stringr)
# Assuming your dataframe is named 'df' and the column with the GitHub URLs is 'repo_git'
merged_data_new <- merged_data %>%
mutate(org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+"))
View(merged_data_new)
# Specify the file path and name
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/merged_data_new.csv"
# Write the merged_data dataframe to a CSV file
write.csv(merged_data_new, file_path, row.names = FALSE)
merged_data_new <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/raw/merged_data_new.csv")
merged_data_new <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/merged_data_new.csv")
# Assuming your merged dataframe is named 'merged_data'
# And assuming 'release_count' is already the count of releases per repo_id per date
# Now, summing up the release counts per org_name per date
releases_per_org_date <- merged_data_new %>%
group_by(org_name, date) %>%
summarise(total_releases = sum(release_count), .groups = 'drop')
# View the resulting dataframe
head(releases_per_org_date)
View(releases_per_org_date)
# Assuming your dataframe is named 'merged_data' and has a column 'org_name'
number_of_orgs <- merged_data_new %>%
summarise(total_orgs = n_distinct(org_name)) %>%
pull(total_orgs)
# Print the number of unique organizations
print(number_of_orgs)
number of releases by org.
# converting date format:
releases_raw$release_created_at <- ymd_hms(releases_raw$release_created_at)
# create a new column that just contains the date part of release_created_at
releases_raw$date <- as.Date(releases_raw$release_created_at)
# group by repo_id and date, and count no. of releases
releases_grouped <- releases_raw %>%
group_by(repo_id, date) %>%
summarise(release_count = n(), .groups = 'drop')  # Drop groups for easier plotting
# Plot the data with ggplot2
releases_grouped %>%
ggplot(aes(x = date, y = release_count, group = repo_id)) +
geom_line(aes(color = as.factor(repo_id)), alpha = 0.75) +  # Connects counts over time by repo_id
geom_point(aes(color = as.factor(repo_id))) +  # Visualize each count
theme_minimal() +
labs(x = "Date", y = "Number of Releases", title = "Time Series of Release Counts by Repo", color = "Repo ID") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Improve date labels readability
# Specify the file path and name
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/merged_data.csv"
# Write the merged_data dataframe to a CSV file
write.csv(merged_data, file_path, row.names = FALSE)
# OK so this data plainly isn't correct! repo_group_id is NOT the same as organisation!
#
# Ensure release_created_at is a Date or POSIXct type
merged_data$release_created_at <- as.Date(merged_data$release_created_at)
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Data import
releases_raw <- read.csv(paste0(base_path, "data/raw/releases-all.csv")) %>%
mutate(
# Convert date formats and extract components
release_created_at = ymd_hms(release_created_at),
date = as.Date(release_created_at),
# Extract organization name from repo_git (assuming this column exists in releases_raw)
org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+")
)
View(releases_raw)
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Data import
releases_raw <- read.csv(paste0(base_path, "data/raw/releases-all.csv")) %>%
mutate(
# Convert date formats and extract components
release_created_at = ymd_hms(release_created_at),
date = as.Date(release_created_at),
)
# Assuming releases_grouped and repo_group_data are already defined and available
# Merge dataframes on 'repo_id'
merged_data <- left_join(releases_grouped, repo_group_data, by = "repo_id") %>%
# Additional manipulation can go here if necessary
mutate(release_created_at = as.Date(release_created_at),
# Extract organization name from repo_git (assuming this column exists in releases_raw)
org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+"))
rlang::last_trace()
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Load necessary libraries
library(tidyverse)
library(lubridate)
# Data import
releases_raw <- read.csv(paste0(base_path, "data/raw/releases-all.csv")) %>%
mutate(
# Convert date formats and extract components
release_created_at = ymd_hms(release_created_at),
date = as.Date(release_created_at),
)
# Assuming releases_grouped and repo_group_data are already defined and available
# Merge dataframes on 'repo_id'
merged_data <- left_join(releases_grouped, repo_group_data, by = "repo_id") %>%
# Additional manipulation can go here if necessary
# Extract organization name from repo_git (assuming this column exists in releases_raw)
mutate(org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+"))
# Writing the processed data to a CSV file
write.csv(merged_data, paste0(base_path, "data/processed/merged_data.csv"), row.names = FALSE)
# Aggregate data: Count releases by org_name and date
releases_over_time <- merged_data %>%
group_by(org_name, date) %>%
summarise(releases_count = n(), .groups = 'drop')  # Adjusted to count by org_name
# Plot the aggregated data
ggplot(releases_over_time, aes(x = date, y = releases_count, color = as.factor(org_name))) +
geom_line() +
geom_point(size = 1, alpha = 0.6) +
theme_minimal() +
labs(title = "Number of Releases by Organization Over Time",
x = "Date", y = "Number of Releases", color = "Organization") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Note: The 'repo_group_id' references changed to 'org_name'
library(tidyverse)
library(lubridate)
library(dplyr)
merged_data_new <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/merged_data_new.csv")
# Assuming your merged dataframe is named 'merged_data'
# And assuming 'release_count' is already the count of releases per repo_id per date
# Now, summing up the release counts per org_name per date
releases_per_org_date <- merged_data_new %>%
group_by(org_name, date) %>%
summarise(total_releases = sum(release_count), .groups = 'drop')
# View the resulting dataframe
head(releases_per_org_date)
# Assuming your dataframe is named 'merged_data' and has a column 'org_name'
number_of_orgs <- merged_data_new %>%
summarise(total_orgs = n_distinct(org_name)) %>%
pull(total_orgs)
# Print the number of unique organizations
print(number_of_orgs)
View(merged_data_new)
View(releases_grouped)
View(releases_over_time)
View(releases_raw)
View(merged_data_new)
merged_data_new <- read.csv("/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/merged_data_new.csv")
library(dplyr)
library(lubridate)
# Assuming your dataframe is named 'merged_data_new'
# and has 'org_name' and 'release_created_at' columns
# Convert release_created_at to Date if it's not already
merged_data_new$release_created_at <- as.Date(merged_data$release_created_at)
View(releases_over_time)
View(releases_grouped)
View(repo_group_filtered)
View(repo_group_data)
View(repo_group_check)
View(repo_group_data)
View(repo_group_filtered)
# Assuming 'releases_raw' and 'repo_org_mapping' are your dataframes
# And both have a 'repo_id' column
# Ensure that 'repo_id' columns in both dataframes are of the same type
releases_raw <- left_join(releases_raw, repo_group_data, by = "repo_id")
View(releases_raw)
releases_master <- left_join(releases_raw, repo_group_data, by = "repo_id") %>%
mutate(org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+"))
View(repo_group_data)
View(releases_raw)
releases_master <- left_join(releases_raw, repo_group_data, by = "repo_id") %>%
mutate(org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+"))
releases_raw <- left_join(releases_raw, repo_group_data, by = "repo_id")
releases_master <- releases_raw %>%
mutate(org_name = str_extract(repo_git, "(?<=github\\.com\\/)[^\\/]+"))
View(releases_raw)
releases_master <- releases_raw %>%
mutate(org_name = str_extract(repo_git.x, "(?<=github\\.com\\/)[^\\/]+"))
View(releases_master)
# Assuming your dataframe is named 'merged_data_new'
# and has 'org_name' and 'release_created_at' columns
# Convert release_created_at to Date if it's not already
releases_master$release_created_at <- as.Date(merged_data$release_created_at)
# Calculate monthly release frequency for each org
release_frequency <- releases_master %>%
mutate(year_month = floor_date(release_created_at, "month")) %>%
group_by(org_name, year_month) %>%
summarise(releases = n(), .groups = 'drop')
# View the results
head(release_frequency)
View(release_frequency)
