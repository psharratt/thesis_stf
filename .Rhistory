library(tidyverse)
library(lubridate)
library(readxl)
library(readr)
library(dplyr)
library(stringr)
# Import treatment group data
treatment_group <- read_excel(paste0(base_path, "data/raw/investment/target_group.xlsx"))
# Import augur repo groups all data
repo_groups_all <- read_csv("data/raw/augur/repo_groups_all.csv")
repo_ids <- read_csv("data/processed/target_group_repo_ids.csv")
treatment_group <- treatment_group %>%
rename(org_url = org, repo_url = repo)
# Adjusted step for extracting org and repo names without str_remove_suffix
treatment_group <- treatment_group %>%
mutate(
org = str_extract(org_url, "(?<=github.com/)[^/]+") %>% str_replace("/$", ""),
)
# Double-check the extraction results
head(treatment_group)
# Perform the join
treatment_group_final <- left_join(treatment_group, repo_ids, by = c("org", "repo"))
# Import treatment group data
treatment_group <- read_excel(paste0(base_path, "data/raw/investment/target_group.xlsx"))
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Load necessary libraries
library(tidyverse)
library(lubridate)
library(readxl)
library(readr)
library(dplyr)
library(stringr)
# Import treatment group data
treatment_group <- read_excel(paste0(base_path, "data/raw/investment/target_group.xlsx"))
# Import augur repo groups all data
repo_groups_all <- read_csv("data/raw/augur/repo_groups_all.csv")
repo_ids <- read_csv("data/processed/target_group_repo_ids.csv")
treatment_group <- treatment_group %>%
rename(org_url = org, repo_url = repo)
# Adjusted step for extracting org and repo names without str_remove_suffix
treatment_group <- treatment_group %>%
mutate(
org = str_extract(org_url, "(?<=github.com/)[^/]+") %>% str_replace("/$", ""),
)
# Double-check the extraction results
head(treatment_group)
# Perform the join
treatment_group_final <- left_join(treatment_group, repo_ids, by = c("org"))
# Verify the merged data
head(treatment_group_final)
View(treatment_group_final)
View(treatment_group_final)
treatment_group_final <- treatment_group_final %>%
select(org, repo, org_url, repo_url, repo_id, everything())
# Verify the merged data
head(treatment_group_final)
View(treatment_group_final)
# Specifying the path and filename for your Excel file
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/treatment_group_final.xlsx"
# Exporting the data frame to an Excel file
write.xlsx(treatment_group_final, file = file_path)
library(openxlsx)
# Specifying the path and filename for your Excel file
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/treatment_group_final.xlsx"
# Exporting the data frame to an Excel file
write.xlsx(treatment_group_final, file = file_path)
treatment_group_final <- read_excel(paste0(base_path, "data/processed/investment/target_group_final.xlsx"))
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
treatment_group_final <- read_excel(paste0(base_path, "data/processed/investment/target_group_final.xlsx"))
treatment_group_final <- read_excel(paste0(base_path, "data/processed/target_group_final.xlsx"))
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
treatment_group_final <- read_excel(paste0(base_path, "data/processed/treatment_group_final.xlsx"))
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Libraries
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
# Load the commits data
commits_data <- read_csv("data/processed/target_repos_commits_over_time.csv")
# Load the treatment group data
treatment_data <- read_excel("data/processed/treatment_group_final.xlsx.xlsx")
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Libraries
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
# Load the commits data
commits_data <- read_csv(paste0(base_path,"data/processed/target_repos_commits_over_time.csv"))
# Load the treatment group data
treatment_data <- read_excel(paste0(base_path,"data/processed/treatment_group_final.xlsx.xlsx"))
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
# Libraries
library(readr)
library(readxl)
library(dplyr)
library(ggplot2)
# Load the commits data
commits_data <- read_csv(paste0(base_path,"data/processed/target_repos_commits_over_time.csv"))
# Load the treatment group data
treatment_data <- read_excel(paste0(base_path,"data/processed/treatment_group_final.xlsx"))
View(commits_data)
View(commits_data)
# Combine year and month into a single Date column
commits_data_2 <- commits_data %>%
mutate(date = make_date(year, month, 1)) # Creates a Date for the first day of each month
View(commits_data_2)
# Plotting commits over time for each repo_id
ggplot(commits_data_2, aes(x = date, y = total_commits, group = repo_id)) +
geom_line(aes(color = as.factor(repo_id))) + # Color lines by repo_id
geom_point(aes(color = as.factor(repo_id))) + # Add points
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y") + # Format X-axis dates
theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Rotate X-axis labels for better readability
labs(title = "Monthly Commits Over Time by Repository",
x = "Date",
y = "Total Commits",
color = "Repo ID") +
theme_minimal()
# Get unique repo_ids
unique_repo_ids <- unique(commits_data$repo_id)
# Define the base path where plots should be saved
save_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/output/graphs/repo commits over time/"
# Loop through each unique repo_id
for (repo_id in unique_repo_ids) {
# (The rest of the loop's content goes here)
# Create the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
labs(title = paste("Monthly Commits Over Time for Repo ID:", repo_id),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Use ggsave to save the plot, specifying the full path for each file
ggsave(filename = paste0(save_path, "plot_repo_id_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
# Loop through each unique repo_id
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data, repo_id == repo_id)
# Create the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
labs(title = paste("Monthly Commits Over Time for Repo ID:", repo_id),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Use ggsave to save the plot, specifying the full path for each file
ggsave(filename = paste0(save_path, "plot_repo_id_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
# Assuming repo_id is the common key in both DataFrames
# Adjust column names as necessary, especially for the repo_name or equivalent in treatment_data
commits_data_2 <- merge(commits_data, treatment_data[, c("repo_id", "repo_name")], by = "repo_id")
View(treatment_data)
# Assuming repo_id is the common key in both DataFrames
# Adjust column names as necessary, especially for the repo_name or equivalent in treatment_data
commits_data_2 <- merge(commits_data, treatment_data[, c("repo_id", "repo")], by = "repo_id")
# Define the base path for saving plots
save_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/output/graphs/repo commits over time/"
# Loop through each unique repo_id
unique_repo_ids <- unique(commits_data_2$repo_id)
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Assuming the first row's repo_name is representative for all rows of this repo_id
repo_name <- repo_data_2$repo_name[1]
# Create the plot
p <- ggplot(repo_data_2, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
labs(title = paste("Monthly Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave(filename = paste0(save_path, "plot_", repo_name, "_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
# Loop through each unique repo_id
unique_repo_ids <- unique(commits_data_2$repo_id)
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Assuming the first row's repo_name is representative for all rows of this repo_id
repo_name <- repo_data$repo_name[1]
# Create the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
labs(title = paste("Monthly Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave(filename = paste0(save_path, "plot_", repo_name, "_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
View(repo_data)
View(commits_data_2)
# Assuming repo_id is the common key in both DataFrames
# Adjust column names as necessary, especially for the repo_name or equivalent in treatment_data
commits_data_2 <- merge(commits_data, treatment_data[, c("repo_id", "repo")], by = "repo_id") %>%
mutate(date = make_date(year, month, 1))
View(commits_data_2)
# Loop through each unique repo_id
unique_repo_ids <- unique(commits_data_2$repo_id)
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Assuming the first row's repo_name is representative for all rows of this repo_id
repo_name <- repo_data$repo_name[1]
# Create the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
labs(title = paste("Monthly Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave(filename = paste0(save_path, "plot_", repo_name, "_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
for (repo_id in unique_repo_ids) {
repo_data <- filter(commits_data, repo_id == repo_id)
# Assuming the first row's repo_name is representative for all rows of this repo_id
repo_name <- repo_data$repo_name[1]
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() + # Add lines
geom_point() + # Add points
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") + # Format X-axis labels to show month and year
labs(title = paste("Monthly Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # Rotate X-axis labels for readability
print(p)
# Replace '/path/to/your/directory/' with the actual path where you want to save the plots
ggsave(filename = paste0("/path/to/your/directory/", "plot_", repo_name, "_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Extract repo_name for the current repo_id (assuming 'repo' is the correct column name)
repo_name <- repo_data$repo[1]
# Create the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(title = paste("Monthly Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Construct filename using gsub to ensure valid file names
file_name <- gsub("[^a-zA-Z0-9]", "_", paste0(repo_name, "_", repo_id, ".png"))
# Save the plot
ggsave(filename = paste0(save_path, file_name), plot = p, width = 10, height = 6)
}
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Extract repo_name for the current repo_id
repo_name <- repo_data$repo[1]
# Create the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(title = paste("Monthly Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date",
y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ensure the filename is sanitized and includes '.png' extension
file_name <- gsub("[^a-zA-Z0-9]", "_", paste0(repo_name, "_", repo_id))
full_file_path <- paste0(save_path, file_name, ".png") # Ensure .png extension is explicitly added
# Save the plot with the full file path and explicit device type
ggsave(filename = full_file_path, plot = p, device = "png", width = 10, height = 6)
}
View(commits_data_2)
# Loop through each unique repo_id for debugging
for (repo_id in unique_repo_ids) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Debug: Print out to check if filtering works correctly
print(paste("Plotting for Repo ID:", repo_id, "with", nrow(repo_data), "rows."))
# Extract the first repo_name (assuming all rows have the same repo_name for the same repo_id)
repo_name <- repo_data$repo[1]
# Create the plot with simplified aesthetics for debugging
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
labs(title = paste("Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits")
# Print plot to R's graphics device for immediate viewing
print(p)
# Construct the filename, ensuring it's valid
file_name <- paste0("plot_", gsub("[^a-zA-Z0-9]", "_", repo_name), "_", repo_id, ".png")
full_file_path <- paste0(save_path, file_name)
# Use ggsave to save the plot, specifying the full path and file name
ggsave(full_file_path, plot = p, width = 8, height = 6, device = 'png')
# Optional: break after first iteration for initial testing
# break
}
example_repo_id <- unique(commits_data_2$repo_id)[1]
example_repo_data <- filter(commits_data_2, repo_id == example_repo_id)
View(example_repo_data)
print(nrow(example_repo_data))
head(example_repo_data)
commits_data_2$date <- as.Date(make_date(year, month, 1))
View(commits_data_2)
str(commits_data_2)
View(commits_data_2)
# Assuming the initial diagnostics confirm that filtering works as expected
for (repo_id in unique(commits_data_2$repo_id)) {
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Debugging: Print the number of rows after filtering
print(paste("Plotting for repo_id:", repo_id, "- Number of data points:", nrow(repo_data)))
# Extract repo_name for title (ensure this matches your DataFrame's column name)
repo_name <- unique(repo_data$repo)[1]
# Create and plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() +
geom_point() +
scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
labs(title = paste("Commits Over Time for", repo_name, "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits")
print(p) # Optional: Comment this out if you're running a large batch
# Construct filename
filename <- paste0(save_path, "plot_", gsub("[^a-zA-Z0-9\\-]", "_", repo_name), "_", repo_id, ".png")
# Save plot
ggsave(filename, p, width = 10, height = 6, device = 'png')
}
View(commits_data_2)
# Specifying the path and filename for your Excel file
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/commits_data_2.xlsx"
# Exporting the data frame to an Excel file
write.xlsx(commits_data_2, file = file_path)
# Loop through each unique repo_id to create and save plots
for (repo_id in unique(commits_data_2$repo_id)) {
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Optional: Retrieve a human-readable repository name for the title
repo_name <- repo_data$repo[1]
# Generate the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(title = paste("Commits Over Time:", repo_name, "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Construct the filename
filename <- paste0(save_path, "commits_", gsub("[[:punct:]]", "", repo_name), "_", repo_id, ".png")
# Save the plot
ggsave(filename, plot = p, width = 10, height = 6, device = 'png')
}
# Loop through each unique repo_id to create and save plots
for (repo_id in unique(commits_data_2$repo_id)) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Generate the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() + geom_point() +
labs(title = paste("Total Commits Over Time for", repo_data$repo[1], "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Construct the filename
filename <- paste0(plots_dir, "repo_", repo_id, ".png")
# Save the plot
ggsave(filename, plot = p, width = 10, height = 6)
}
plots_dir <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/output/graphs/repo commits over time/"
dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
# Loop through each unique repo_id to create and save plots
for (repo_id in unique(commits_data_2$repo_id)) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Generate the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() + geom_point() +
labs(title = paste("Total Commits Over Time for", repo_data$repo[1], "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Construct the filename
filename <- paste0(plots_dir, "repo_", repo_id, ".png")
# Save the plot
ggsave(filename, plot = p, width = 10, height = 6)
}
# Loop through each unique repo_id to create and save plots
for (repo_id in unique(commits_data_2$repo_id)) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Generate the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() + geom_point() +
labs(title = paste("RStudio Total Commits Over Time for", repo_data$repo[1], "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Construct the filename
filename <- paste0(plots_dir, "repo_", repo_id, ".png")
# Save the plot
ggsave(filename, plot = p, width = 10, height = 6)
}
# Loop through each unique repo_id to create and save plots
for (repo_id in unique(commits_data_2$repo_id)) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2, repo_id == repo_id)
# Generate the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() + geom_point() +
labs(title = paste("RStudio Total Commits Over Time for", repo_data$repo[1], "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Construct the filename
filename <- paste0(plots_dir, "repo_", repo_id, ".png")
# Save the plot
ggsave(filename, plot = p, width = 10, height = 6)
}
# Set working directory and base path
base_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/"
setwd(base_path)
library(readxl)
library(ggplot2)
library(dplyr)
library(lubridate)
# Load the Excel file into a data frame
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/commits_data_2.xlsx" # Adjust the path for this environment
commits_data_2_df <- read_excel(file_path)
# Ensure 'date' is a Date type
commits_data_2_df$date <- as.Date(commits_data_2_df$date)
# Define the directory for plots
plots_dir <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/output/graphs/repo commits over time/R file test" # Adjust the path for this environment
dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
# Loop through each unique repo_id to create and save plots
for (repo_id in unique(commits_data_2_df$repo_id)) {
# Filter data for the current repo_id
repo_data <- filter(commits_data_2_df, repo_id == repo_id)
# Generate the plot
p <- ggplot(repo_data, aes(x = date, y = total_commits)) +
geom_line() + geom_point() +
labs(title = paste("Total Commits Over Time for", repo_data$repo[1], "(ID:", repo_id, ")"),
x = "Date", y = "Total Commits") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Save the plot
ggsave(paste0(plots_dir, "repo_", repo_id, ".png"), plot = p, width = 10, height = 6)
}
# Import treatment group data
treatment_group <- read_excel(paste0(base_path, "data/raw/investment/target_group.xlsx"))
# Import augur repo groups all data
repo_groups_all <- read_csv("data/raw/augur/repo_groups_all.csv")
repo_ids <- read_csv("data/processed/target_group_repo_ids.csv")
treatment_group <- treatment_group %>%
rename(org_url = org, repo_url = repo)
# Adjusted step for extracting org and repo names without str_remove_suffix
treatment_group <- treatment_group %>%
mutate(
org = str_extract(org_url, "(?<=github.com/)[^/]+") %>% str_replace("/$", ""),
)
# Double-check the extraction results
head(treatment_group)
# Perform the join
treatment_group_final <- left_join(treatment_group, repo_ids, by = c("org"))
treatment_group_final <- treatment_group_final %>%
select(org, repo, org_url, repo_url, repo_id, everything())
# Verify the merged data
head(treatment_group_final)
View(treatment_group_final)
# Specifying the path and filename for your Excel file
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/treatment_group_final.xlsx"
# Exporting the data frame to an Excel file
write.xlsx(treatment_group_final, file = file_path)
View(treatment_group_final)
View(treatment_group_final)
treatment_group_final <- treatment_group_final %>%
mutate(start_date = as.Date(start_date, format = "%B %d, %Y"), # Adjust format based on original format
end_date = as.Date(end_date, format = "%B %d, %Y")) %>% # Adjust format based on original format
select(org, repo, org_url, repo_url, repo_id, everything())
View(treatment_group_final)
# Verify the merged data
head(treatment_group_final)
mutate(start_date = as.Date(start_date, format = "%B %d, %Y"), # Adjust format based on original format
end_date = as.Date(end_date, format = "%B %d, %Y")) # Adjust format based on original format
# Verify the merged data
head(treatment_group_final)
# Specifying the path and filename for your Excel file
file_path <- "/Users/paulsharratt/Documents/Hertie/Semester 4/03 - Master's Thesis/thesis_stf/data/processed/treatment_group_final.xlsx"
# Exporting the data frame to an Excel file
write.xlsx(treatment_group_final, file = file_path)
head(treatment_group_final)
